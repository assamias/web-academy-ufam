// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model Cliente {
  id_cliente       Int          @id @default(autoincrement())
  nome_completo    String       @db.VarChar(150)
  cpf              String       @unique @db.Char(11)
  telefone         String?      @db.VarChar(15)
  email            String       @unique @db.VarChar(100)
  data_nascimento  DateTime
  pedidos          Pedido[]
  enderecos        Endereco[]
}

model Endereco {
  id_endereco   Int      @id @default(autoincrement())
  cliente_id    Int
  rua           String   @db.VarChar(150)
  numero        String   @db.VarChar(10)
  complemento   String?  @db.VarChar(50)
  cidade        String   @db.VarChar(100)
  estado        String   @db.Char(2)
  cep           String   @db.Char(8)

  cliente       Cliente  @relation(fields: [cliente_id], references: [id_cliente])
  pedidos       Pedido[]
}

model Categoria {
  id_categoria   Int             @id @default(autoincrement())
  nome           String          @db.VarChar(100)
  subcategorias  SubCategoria[]
}

model SubCategoria {
  id_subcategoria  Int             @id @default(autoincrement())
  categoria_id     Int
  nome             String          @db.VarChar(100)
  produtos         Produto[]

  categoria        Categoria       @relation(fields: [categoria_id], references: [id_categoria])
}

model Produto {
  id_produto      Int                 @id @default(autoincrement())
  subcategoria_id Int
  nome            String              @db.VarChar(100)
  marca           String              @db.VarChar(100)
  preco_unitario  Decimal             @db.Decimal(10, 2)
  quantidade      Int
  codigo_barras   String?             @unique @db.VarChar(50)
  ativo           Boolean             @default(true)
  itensPedido     ItemPedido[]
  numerosSerie    NumeroSerie[]

  subcategoria    SubCategoria        @relation(fields: [subcategoria_id], references: [id_subcategoria])
}

model NumeroSerie {
  id_numero_serie  Int        @id @default(autoincrement())
  produto_id       Int
  numero_serie     String     @unique @db.VarChar(100)
  disponivel       Boolean    @default(true)

  produto          Produto    @relation(fields: [produto_id], references: [id_produto])
}

model Pedido {
  id_pedido        Int           @id @default(autoincrement())
  cliente_id       Int
  endereco_id      Int
  data_hora        DateTime
  forma_pagamento  String        @db.VarChar(50)
  total            Decimal       @db.Decimal(10, 2)
  desconto         Decimal?      @db.Decimal(5, 2) @default(0.00)
  status           String        @default("em processamento")
  atualizado_em    DateTime      @updatedAt
  historicos       HistoricoPedido[]
  itens            ItemPedido[]

  cliente          Cliente       @relation(fields: [cliente_id], references: [id_cliente])
  endereco         Endereco      @relation(fields: [endereco_id], references: [id_endereco])
}

model ItemPedido {
  id_pedido    Int
  id_produto   Int
  quantidade   Int
  preco        Decimal @db.Decimal(10, 2)

  pedido       Pedido   @relation(fields: [id_pedido], references: [id_pedido])
  produto      Produto  @relation(fields: [id_produto], references: [id_produto])

  @@id([id_pedido, id_produto])
}

model HistoricoPedido {
  id_historico  Int       @id @default(autoincrement())
  pedido_id     Int
  status        String
  data_registro DateTime  @default(now())

  pedido        Pedido    @relation(fields: [pedido_id], references: [id_pedido])
}
